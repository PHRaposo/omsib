
{
	Initialize "() {
if (Sibelius.ProgramVersion > 20200600) 
	{
	SetInterpreterOption(TreatSingleCharacterAsString);
	SetInterpreterOption(SupportHalfSemitonePitchValues);
	}
language = Sibelius.ApplicationLanguage;
pluginName = '';
if (language = 'Brazilian Portuguese')
	{
	pluginName = 'Importar Dados do OpenMusic';
	}
else
	{
	pluginName = 'Import data from OpenMusic' ;
	}

AddToPluginsMenu(pluginName,'Run');
 }"
	Run "() {
language = Sibelius.ApplicationLanguage;

selectFileText = '';
failText = '';

if (language = 'Brazilian Portuguese')
	{
	selectFileText = 'ESTE PLUGIN IRÁ IMPORTAR UM ARQUIVO DE TEXTO GERADO PELA BIBLIOTECA OMSIB DO OPENMUSIC. \n\POR FAVOR, SELECIONE O ARQUIVO (.TXT).'; 
	}
else
	{
	selectFileText = 'THIS PLUGIN WILL IMPORT A TEXT FILE GENERATED BY OMSIB OPENMUSIC LIBRARY. \n\PLEASE, SELECT THE FILE (.TXT).'; 
	}

Sibelius.MessageBox(selectFileText);

///////////////////////////
// OPEN TEXT FILE

myfile = Sibelius.SelectFileToOpen ('Save','*.txt','', 'txt', 'TEXT', 'Text File');

filedata = Sibelius.ReadTextFile(myfile, True);

DataArray = filedata.ConvertToSparseArray();

isValid = filedata.NumChildren;

if (isValid = 0)
	{
	if (language = 'Brazilian Portuguese')
		{
		failText = 'FALHA AO LER O ARQUIVO ' & myfile & '!';
		Sibelius.MessageBox(failText);
		}
	else
		{
		failText = 'FAILED TO READ THE FILE ' & myfile & '!';
		Sibelius.MessageBox(failText);
		}
     ExitPlugin();
	}

///////////////////////////

activeScore = Sibelius.ActiveScore;
nStaves = activeScore.StaffCount;

if (nStaves = 0)
	{
	score = activeScore;
	}
else
	{
	score = Sibelius.New();
	}

score.Redraw = False;

count = 0;
DataLength = GetArrayLength(DataArray);

if (language = 'Brazilian Portuguese')
	{
	Sibelius.CreateProgressDialog('Importando dados...', 0, DataLength);
	}
else
	{
	Sibelius.CreateProgressDialog('Importing data...', 0, DataLength);
	}

///////////////////////////
//VARIABLES

instrumentType = '';
instumentLongName = '';
instumentShortName = '';
instrumentNumberOfStaves = '';

staff = '';
currentStaff = 1;

bar = '';

sysStaff = score.SystemStaff;
sysbar = '';

tempoUnit = '';
tempoBpm = '';

timesignatureTop = '';
timesignatureBottom = '';

notePosition = '';
notePitch = '';
noteDur = '';
noteTie = '';
isTuplet = '';
tupletNoteDepth = '';

tupletArray = CreateSparseArray();
tupletDepth = '';

tupletPosition = '';
tupletLeft = '';
tupletRight = '';
tupletUnit = '';

nestedTupletPosition = '';
nestedTupletLeft = '';
nestedTupletRight = '';
nestedTupletUnit = '';

currentNote = '';
articulation = '';
techText = '';
currentNoteParent = '';
ParentPosition = '';
techPosition = '';

dynamicPosition = '';
dynamicText = ''; 
changefont = '\\fOpus Text Std\\' & '\\i\\';

linePosition = '';
lineDur = '';
lineStyle = '';

textComposr = '';
textTitle = '';

//////////////////////////////
// THE LOOP

for each line in DataArray
	{
    	count = count+1;
	continue = Sibelius.UpdateProgressDialog(count,'');
	strLine = '' & line;
	DataId = '' & CharAt(strLine, 0);
    if (DataId = 'i')
		{
		instrumentType = GetData(strLine);
         }
    if (DataId = 'l')
		{
		instrumentLongName = GetData(strLine);
         }
    if (DataId = 's')
		{
		instrumentShortName = GetData(strLine);
		if (instrumentLongName = 'bottom')
			{
			staff = score.NthStaff(currentStaff - 1);
			}
		else
			{
         		score.CreateInstrumentAtBottom(instrumentType, True, instrumentLongName, instrumentShortName);
			staff = score.NthStaff(currentStaff);
			instrumentNumberOfStaves = staff.NumStavesInSameInstrument;
			currentStaff = currentStaff + instrumentNumberOfStaves;
			}
         }
    if (DataId = 'B')
		{
         data = GetData(strLine);
		score.AddBars(data);
         }
    if (DataId = 'b')
		{
         data = GetData(strLine);
		bar = staff.NthBar(data);
         }
    if (DataId = 'S')
		{
         data = GetData(strLine);
         sysbar = sysStaff.NthBar(data);
         }
    if (DataId = 'u')
		{
         tempoUnit = GetData(strLine);
         }
    if (DataId = 'e')
		{
         tempoBPM = GetData(strLine);
         tempoText = FormatTempoText(tempoUnit, tempoBPM);
		sysbar.AddText(0,tempoText,'text.system.tempo');
         }
    if (DataId = 'g')
		{
         if (staff.StaffNum = 1)
			{
         		timesignatureTop = GetData(strLine);
			}
         }
    if (DataId = 'f')
		{
         if (staff.StaffNum = 1)
			{
         		timesignatureBottom = GetData(strLine);
         		sysbar.AddTimeSignature(timesignatureTop, timesignatureBottom , True, True);
			}
         }
    if (DataId = 'o')
		{
         tupletPosition = GetData(strLine);
         }
    if (DataId = 'w')
		{
         tupletLeft = GetData(strLine);
         }
    if (DataId = 'q')
		{
         tupletRight = GetData(strLine);
         }
    if (DataId = 'c')
		{
         tupletUnit = GetData(strLine);  
         }
    if (DataId = 'n')
		{
         nestedTupletPosition = GetData(strLine);  
         }
    if (DataId = 'z')
		{
         nestedTupletLeft = GetData(strLine);  
         }
    if (DataId = 'j')
		{
         nestedTupletRight = GetData(strLine);  
         }
    if (DataId = 'k')
		{
         nestedTupletUnit = GetData(strLine);
         }
    if (DataId = 'T')
		{
         tupletDepth = GetData(strLine);
		if (tupletDepth = 0)
			{
			tupletArray[tupletDepth] = bar.AddTuplet(tupletPosition, 1, tupletLeft, tupletRight, tupletUnit, "1", "1", False);
			}
		else
			{	
			tupletArray[tupletDepth] = 	tupletArray[(tupletDepth - 1)].AddNestedTuplet(nestedTupletPosition, nestedTupletLeft, nestedTupletRight, nestedTupletUnit, "1", "1", False);	 
			}  
         }

    if (DataId = 'p')
		{
         notePosition = GetData(strLine);
         }
    if (DataId = 'm')
		{
		notePitch = SplitString(GetData(strLine), ' ', true);
         }
    if (DataId = 'd')
		{
         noteDur = GetData(strLine);
         }
    if (DataId = 't')
		{
         noteTie = GetData(strLine);
         }
    if (DataId = 'x')
		{
         isTuplet = GetData(strLine);
         }

    if (DataId = 'X')
		{
         tupletNoteDepth = GetData(strLine); 
		if (isTuplet = 'True')
			{
			for each pitch in notePitch
				{
				 currentNote = tupletArray[tupletNoteDepth].AddNote(notePosition, pitch, noteDur, noteTie);
				}
			}
		else  
			{
			for each pitch in notePitch
				{
				currentNote = bar.AddNote(notePosition, pitch, noteDur, noteTie);	
				}
			} 
         }
	if (DataId = 'a')
		{
		articulation = SplitString(GetData(strLine), ' ', true);
		for each art in articulation
			{
			currentNote.SetArticulation(art, True);
			}
		}
	if (DataId = 'K')
		{
		techText = GetData(strLine);
	    	currentNoteParent = currentNote.ParentNoteRest;
	    	parentPosition = currentNoteParent.Position;
	    	techPosition = utils.CastToInt(parentPosition); 
		bar.AddText(techPosition, techText, 'Technique');
		}
    if (DataId = 'v')
		{
         dynamicText = changefont & GetData(strLine);
	    	currentNoteParent = currentNote.ParentNoteRest;
	    	parentPosition = currentNoteParent.Position;
	    	dynamicPosition = utils.CastToInt(parentPosition);
         bar.AddText(dynamicPosition, dynamicText,'text.staff.expression');
         }
    if (DataId = 'P')
		{
         linePosition = GetData(strLine);
         }
    if (DataId = 'D')
		{
         lineDur = GetData(strLine);
         }
    if (DataId = 'L')
		{
         lineStyle = GetData(strLine);
		staff.AddLine (linePosition, lineDur, lineStyle);
         }
      if (DataId = 'I')
		{
         textTitle = GetData(strLine);
         sysbar.AddText(0, textTitle,'text.system.page_aligned.title'); 
         }
    if (DataId = 'C')
		{
         textComposer = GetData(strLine);
		sysbar.AddText(0, textComposer, 'text.system.page_aligned.composer');
         }
	}

Sibelius.DestroyProgressDialog();
if (language = 'Brazilian Portuguese')
	{
	Sibelius.MessageBox ('PRONTO!');
	}
else
	{
	Sibelius.MessageBox ('DONE!');
	}
}"
	GetData "(strLine) {
lineLength = Length(strLine);
correctLength = lineLength - 2;
substring = '' & Substring(strLine, 1, correctLength);
return substring;




}"
	FormatTempoText "(unit, bpm) {
unitNumber = unit;
unitNote = '';
tempoNumber = bpm;

tempoFontOne = '\\fOpus Text\\';
tempoFontTwo = '\\f_\\ \\f_\\=\\f_\\';

//////////////////////////
/// Note Characters  /////
///		     /////
//////////////////////////
//V = long           /////
//W = breve          /////
//w = semibreve      /////
//h = minim          /////
//q = crotchet       /////
//e = quaver         /////
//x = semiquaver     /////
//y = demisemiquaver /////
//////////////////////////

if (unitNumber = 4096)
	{
	unitNote = 'V';
	}
if (unitNumber = 2048)
	{
	unitNote = 'W';
	}
if (unitNumber = 3072)
	{
	unitNote = 'W.';
	}
if (unitNumber = 1024)
	{
	unitNote = 'w';
	}
if (unitNumber = 1536)
	{
	unitNote = 'w.';
	}
if (unitNumber = 512)
	{
	unitNote = 'h';
	}
if (unitNumber = 768)
	{
	unitNote = 'h.';
	}
if (unitNumber = 256)
	{
	unitNote = 'q';
	}
if (unitNumber = 384)
	{
	unitNote = 'q.';
	}
if (unitNumber = 128)
	{
	unitNote = 'e';
	}
if (unitNumber = 192)
	{
	unitNote = 'e.';
	}
if (unitNumber = 64)
	{
	unitNote = 'x';
	}
if (unitNumber = 96)
	{
	unitNote = 'x.';
	}
if (unitNumber = 32)
	{
	unitNote = 'y';
	}
if (unitNumber = 48)
	{
	unitNote = 'y.';
	}
if ((unitNumber = 16) or (unitNumber = 24) or (unitNumber = 8) or (unitNumber = 12))
    {
     unitNote = 'q';
     Sibelius.MessageBox('Demisemiquaver and Hemidemisemiquaver are not supported for Tempo Text. \n\ Unit set to Quarter note(Crotchet).');
	}

tempoText = tempoFontOne & unitNote & tempoFontTwo & tempoNumber; 

return tempoText;
}"
	GetArrayLength "(DataArray) {
array = DataArray;
count = 0;
for each line in array
	{
	count = count + 1;
	}
return count;
}"
}
