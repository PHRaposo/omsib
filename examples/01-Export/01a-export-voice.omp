; OM File Header - Saved 2024/03/29 11:04:28
; (7.04 :patc (om-make-point 55 44) (om-make-point 49 30) (om-make-point 1288 695) "" 183 0 "2024/03/01 17:43:24" "2024/03/29 10:39:04")
; End File Header
(in-package :om)(load-lib-for (quote ("omsib")))(setf *om-current-persistent* (om-load-patch1 "01a-export-voice" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 481 95) (quote "Finally, the result will show a simple ascending$C major scale played by the flute, with four notes$in staccato, four slurred notes and crescendo, from $mezzo-forte to forte. ") "" (om-make-point 647 550) nil (om-make-color 0 0 0) (om-make-font "Verdana" 16.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SHOW-SIB-TECHNIQUE-TEXTS" (quote om-sibelius::show-sib-technique-texts) (quote nil) (om-make-point 841 453) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEARCH-SIB-INSTRUMENT" (quote om-sibelius::search-sib-instrument) (quote nil) (om-make-point 684 452) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SHOW-SIB-INSTRUMENTS" (quote om-sibelius::show-sib-instruments) (quote nil) (om-make-point 686 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SHOW-SIB-ARTICULATIONS" (quote om-sibelius::show-sib-articulations) (quote nil) (om-make-point 846 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SHOW-SIB-LINES" (quote om-sibelius::show-sib-lines) (quote nil) (om-make-point 1020 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 669 323) (quote "Then, we can optionally include:$$-Instruments [a list with the longname and $shortname of the instrument - see the method $show-sib-instruments or search-sib-instrument$to know the valid arguments]$$- Articulations or Technique texts [list of lists of two $elements, the position and the articulation number or text$- see the methods show-sib-articulations and show-sib-technique-texts]$$- Lines [list of lists of two positions [begin and end] $  and the line [string] - see the method show-sib-lines$$  Note that, for this last input, is necessary to count$the continuation-chords as well [excluding only rests]") "" (om-make-point 605 2) nil (om-make-color 0 0 0) (om-make-font "Verdana" 16.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 422 361) (quote "This is a small example to show $how this library works. $$First, we have a voice object. $$The om->sib method will export:$$- Pitches and rests$$- Dynamics [from velocities]$$- Title [from object name, that can be edited $with right+click -> Get Info]$$- Composer's name [from OM Preferences]$$- Tempos$") "" (om-make-point 58 7) nil (om-make-color 0 0 0) (om-make-font "Verdana" 16.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->SIB" (quote om-sibelius::om->sib) (quote ((om-load-inputfun (quote input-funbox) "voice or poly" "SCORE-OBJECT" nil) (om-load-inputfun (quote input-funbox) "list of lists" "INSTRUMENTS" nil) (om-load-inputfun (quote input-funbox) "list of lists" "ARTICULATIONS" nil) (om-load-inputfun (quote input-funbox) "list of lists" "LINES" nil))) (om-make-point 26 567) (om-make-point 521 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 370 531) (om-make-point 239 28) (list (list 4 7 "Slur above") (list 0 6 "Crescendo")) "((4 7 \"Slur above\") (0 6 \"Crescendo\"))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 264 502) (om-make-point 153 30) (list (list 0 1) (list 1 1) (list 2 1) (list 3 1)) "((0 1) (1 1) (2 1) (3 1))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 188 528) (om-make-point 95 30) (list "Flute" "Fl.") "(\"Flute\" \"Fl.\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Export Voice" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 120) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 103 388) (om-make-point 204 105) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) ((1 (-1 1 1 1)) (1 (1 1 1 1)) 1 -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.04 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 211/100 nil 1000 0 (om-make-point 826 325) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil t (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 8 0 nil 0) (11 0 8 1 nil 0) (10 0 8 2 nil 0) (9 0 8 3 nil 0))) nil 7.04))
