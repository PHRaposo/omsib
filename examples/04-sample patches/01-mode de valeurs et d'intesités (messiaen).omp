; OM File Header - Saved 2024/03/11 08:26:47
; (7.04 :patc (om-make-point 27 22) (om-make-point 3 23) (om-make-point 1115 718) "" 183 0 nil "2024/03/11 08:26:45")
; End File Header
(in-package :om)(load-lib-for (quote ("omsib")))(setf *om-current-persistent* (om-load-patch1 "01-mode de valeurs et d'intesités (messiaen)" (quote ((let ((box (om-load-editor-box1 "POLY 2" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 34 465) (om-make-point 100 70) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (39 (((2 4) ((1 (4 1.0 3)) (1 (7.0 1)))) ((2 4) ((1 (3.0 4 1.0)) (1 (1.0 7)))) ((2 4) ((1 (1.0 7)) (1 (2.0 1 2 3)))) ((2 4) ((1 (7 1)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (3.0 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 3)))) ((2 4) (1.0 (1 (1 1)))) ((2 4) ((1 (1.0 3 4)) 1.0)) ((2 4) (1 (1 (1.0 1 2 4)))) ((2 4) ((1 (1.0 7)) 1)) ((2 4) ((1 (3.0 4 1.0)) (1 (4.0 1.0 3)))) ((2 4) ((1 (3.0 4 1)) (1 (7.0 1)))) ((2 4) (1.0 (1 (3.0 3 1 1)))) ((2 4) ((1 (1.0 7)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (4 1.0 3)) (1 (3 1)))) ((2 4) ((1 (7.0 1)) (1 (3.0 4 1.0)))) ((2 4) ((1 (3.0 1)) (1 (3.0 1)))) ((2 4) ((1 (4.0 1.0 1 2)) (1 (4 1.0 3)))) ((2 4) ((1 (1 1)) (1 (4.0 1.0 1 2)))) ((2 4) ((1 (3 1)) (1 (4.0 1.0 3)))) ((2 4) (1.0 1)) ((2 4) (1 (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 1 2)))) ((2 4) (1 (1 (3.0 4 1.0)))) ((2 4) ((1 (1.0 7)) (1 (4.0 1.0 3)))) ((2 4) (1 (1 (1.0 4 1.0 2)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) ((1 (1.0 1)) (1 (3 4 1.0)))) ((2 4) ((1 (2.0 4 1.0 1)) (1 (4.0 1.0 3)))) ((2 4) ((1 (6.0 1 1)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) 1.0)) ((2 4) (1 (1 (1.0 3)))) ((2 4) ((1 (2.0 4 1.0 1)) (1 (7.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) ((1 (4.0 1.0 3)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) 1.0)) ((2 4) ((1 (7 1)) (1 (1 3)))) ((2 4) ((1 (1 1)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) (1 (7.0 1)))) ((2 4) ((1 (1 3)) (1 (1.0 7)))) ((2 4) ((1 (2.0 3 3)) 1.0)) ((2 4) ((1 (1.0 7)) (1 (1.0 4 1.0 1 1)))) ((2 4) ((1 (1.0 4 1.0 2)) (1 (3.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) (1 (3.0 3 2)))) ((2 4) ((1 (7.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) (1.0 1)) ((2 4) ((1 (1 2 4 1.0)) (1 (4.0 1.0 3)))) ((2 4) ((1 (3.0 4 1.0)) (1 (2.0 4 1.0 1)))) ((2 4) ((1 (1.0 3)) (1 (3.0 4 1.0)))) ((2 4) ((1 (3.0 1)) (1 (2.0 3 3)))) ((2 4) ((1 (4.0 1.0 3)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) (1 (1.0 3)))) ((2 4) ((1 (3.0 4 1.0)) (1 (7.0 1)))) ((2 4) ((1 (3.0 4 1.0)) (1 (2.0 1 2 3)))) ((2 4) (1.0 (1 (4 1.0 3)))) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 3)) (1 (3.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 6 1)))) ((2 4) (1.0 1)) ((2 4) ((1 (3 1 2 2)) (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 3)))) ((2 4) ((1 (6.0 1 1)) (1 (1.0 6 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 7)))) ((2 4) ((1 (1.0 1)) (1 (1.0 7)))) ((2 4) ((1 (3.0 3 2)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (3.0 4 1.0)))) ((2 4) ((1 (2.0 1 2 3)) (1 (1.0 7)))) ((2 4) ((1 (1.0 7)) (1 (1.0 1)))) ((2 4) ((1 (2.0 4 1.0 1)) 1.0)) ((2 4) ((1 (3 4 1.0)) (1 (1.0 2 1)))) ((2 4) (1.0 (1 (1.0 7)))) ((2 4) ((1 (3.0 4 1.0)) (1 (7.0 1)))) ((2 4) ((1 (4.0 1.0 3)) (1 (4.0 1.0 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (375)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (875)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (875)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (79/2 (((2 4) ((1 (-1 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 3)))) ((2 4) (2)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 1 2)))) ((2 4) (1.0 1)) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (2.0 1 1)) (1 (1.0 3)))) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1 1)) (1 (1.0 3)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1 (1 (3.0 1)))) ((2 4) (1.0 (1 (3.0 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (2)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 2 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 3)))) ((2 4) ((1 (1 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) ((1 (1.0 1)) (1 (3.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 2 1)))) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) ((1 (3 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) (2)) ((2 4) (2)) ((2 4) ((1 (1.0 3)) (1 (1.0 3)))) ((2 4) ((1 (1.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (79/2 (((2 4) (-1 (1 (-1 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1 1)))) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1 1)) 1.0)) ((2 4) (2)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (2000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (2000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (1000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (1000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 0 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 1 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 2 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 2 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 2 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 2 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 2 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 3 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 3 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 3 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 3 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 4 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 4 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 4 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 4 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 4 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 5 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 5 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 6 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 6 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 6 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 6 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 7 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 7 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 7 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 8 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 8 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 8 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 8 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 9 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 9 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 9 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 9 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 10 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 10 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 10 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 10 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 11 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 11 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 11 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 11 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 12 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 12 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 12 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 12 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 13 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 13 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 13 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 14 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 14 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 14 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 15 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 15 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 16 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 16 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 16 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 16 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 16 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 16 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 17 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 17 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 17 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 17 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 18 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 18 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 19 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 19 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 19 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 19 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 20 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 20 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 20 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 20 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 20 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 21 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 21 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 21 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 21 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 21 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 21 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 21 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 22 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 23 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 23 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 23 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 24 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 24 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 24 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 25 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 25 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 25 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 25 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 26 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 26 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 26 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 26 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 27 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 27 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 27 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 27 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 28 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 28 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 29 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 29 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 29 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 29 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 29 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 30 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 30 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 30 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 30 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 30 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 31 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 31 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 31 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 32 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 32 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 33 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 33 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 34 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 34 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 34 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 34 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 35 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 35 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 35 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 36 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 36 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 36 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 36 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 37 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 37 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 38 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 38 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 38 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 38 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 38 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 38 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 39 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 39 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 39 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 39 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 39 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 39 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 40 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 40 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 40 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 41 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 41 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 41 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 41 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 42 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 42 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 42 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 43 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 43 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 43 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 44 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 44 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 44 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 45 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 45 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 45 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 46 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 46 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 46 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 46 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 46 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 47 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 48 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 48 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 48 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 49 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 50 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 50 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 50 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 50 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 50 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 51 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 51 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 51 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 51 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 51 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 52 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 52 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 53 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 53 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 53 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 53 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 53 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 54 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 54 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 55 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 55 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 55 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 55 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 56 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 56 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 56 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 56 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 57 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 57 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 57 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 57 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 58 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 58 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 58 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 59 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 60 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 60 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 60 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 60 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 61 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 61 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 61 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 61 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 61 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 62 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 63 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 63 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 63 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 63 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 63 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 63 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 63 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 64 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 64 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 64 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 64 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 65 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 65 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 65 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 65 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 65 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 66 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 66 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 67 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 67 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 67 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 68 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 68 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 69 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 69 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 69 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 69 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 70 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 70 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 70 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 70 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 71 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((0 71 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 71 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 72 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 72 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 72 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 72 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 73 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 73 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 73 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 74 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((0 74 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 74 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 74 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 74 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((0 74 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 75 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 76 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 76 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 76 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((0 76 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 76 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((0 77 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((0 77 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((1 0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((1 1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 1 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 3 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 4 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 4 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 4 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 4 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 7 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 7 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 8 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 10 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 11 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 11 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 11 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 11 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 11 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 11 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 12 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 12 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 13 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 16 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 16 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 17 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 18 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 19 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((1 19 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 19 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 21 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 21 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 21 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 21 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 21 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 23 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 24 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 27 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((1 28 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 28 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 29 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 29 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 29 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 29 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 29 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 31 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 32 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 33 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 33 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 33 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 34 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 34 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((1 35 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 35 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 35 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 35 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 35 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 36 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 39 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 39 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 40 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 41 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 43 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 44 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 44 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 44 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 44 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 47 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((1 48 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 48 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 48 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 49 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 49 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 49 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 49 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 49 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 50 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 51 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 54 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 54 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 54 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 54 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 55 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((1 56 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 56 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 57 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 58 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 59 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((1 59 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 59 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 61 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 61 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 61 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 61 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 64 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 64 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 65 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 66 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 66 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 66 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 67 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 67 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 68 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 70 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 71 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 71 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 71 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 71 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 71 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 72 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 72 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 73 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 73 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 76 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 76 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 77 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((1 77 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((2 0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((2 2 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 2 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((2 5 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 5 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((2 7 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 7 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 10 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 10 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((2 13 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((2 14 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((2 15 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((2 17 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 17 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((2 17 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 17 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 17 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 19 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 19 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((2 20 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 20 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 20 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 22 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 22 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((2 22 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 25 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 25 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((2 25 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 25 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((2 26 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 26 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((2 28 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 28 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 31 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 31 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((2 32 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((2 34 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 34 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((2 37 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((2 38 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((2 39 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 39 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 42 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 42 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((2 42 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 42 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 44 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 44 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((2 44 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 44 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((2 46 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 46 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((2 49 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 49 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 51 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((2 52 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((2 53 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 53 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((2 56 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((2 58 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 59 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 59 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 61 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 61 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((2 62 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 62 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((2 63 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 63 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((2 66 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 66 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 68 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 68 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((2 69 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((2 70 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((2 71 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 71 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((2 74 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((2 76 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 76 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 76 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 78 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((2 78 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 122 90) (om-make-point 1165 512) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote gg) (quote gf) (quote gff)) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "score-preview" (om-load-patch-abs1 "score-preview" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 292 614) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 302 537) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-EXTRA-VEL 3" (quote om-sibelius::add-extra-vel) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)))) (om-make-point 405 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-SIB-ARTICULATIONS 3" (quote om-sibelius::add-sib-articulations) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "positions-articulations" "POSN-ART" (list (list 0 1) (list 2 (list 4 1)))))) (om-make-point 470 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-EXTRA-VEL 2" (quote om-sibelius::add-extra-vel) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)))) (om-make-point 223 341) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-SIB-ARTICULATIONS 2" (quote om-sibelius::add-sib-articulations) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "positions-articulations" "POSN-ART" (list (list 0 1) (list 2 (list 4 1)))))) (om-make-point 260 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-EXTRA-VEL" (quote om-sibelius::add-extra-vel) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)))) (om-make-point 13 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ADD-SIB-ARTICULATIONS" (quote om-sibelius::add-sib-articulations) (quote ((om-load-inputfun (quote input-funbox) "voice" "SELF" (quote t)) (om-load-inputfun (quote input-funbox) "positions-articulations" "POSN-ART" (list (list 0 1) (list 2 (list 4 1)))))) (om-make-point 72 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 2" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 341 149) nil nil nil nil 3))) (setf (numouts box) 3) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 89 127) nil nil nil nil 3))) (setf (numouts box) 3) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 359 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 114 5) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (7 0 1 0 nil 0) (5 0 1 1 nil 0) (3 0 1 2 nil 0) (9 2 2 0 nil 1) (2 0 3 0 nil 0) (8 2 3 1 nil 2) (9 1 4 0 nil 1) (4 0 5 0 nil 0) (8 1 5 1 nil 2) (9 0 6 0 nil 1) (6 0 7 0 nil 0) (8 0 7 1 nil 2) (10 0 8 0 nil 0) (11 0 9 0 nil 0))) 7.04 nil "" (om-make-point 399 23) (om-make-point 620 690)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 37 378) nil (list (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (39 (((2 4) ((1 (4 1.0 3)) (1 (7.0 1)))) ((2 4) ((1 (3.0 4 1.0)) (1 (1.0 7)))) ((2 4) ((1 (1.0 7)) (1 (2.0 1 2 3)))) ((2 4) ((1 (7 1)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (3.0 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 3)))) ((2 4) (1.0 (1 (1 1)))) ((2 4) ((1 (1.0 3 4)) 1.0)) ((2 4) (1 (1 (1.0 1 2 4)))) ((2 4) ((1 (1.0 7)) 1)) ((2 4) ((1 (3.0 4 1.0)) (1 (4.0 1.0 3)))) ((2 4) ((1 (3.0 4 1)) (1 (7.0 1)))) ((2 4) (1.0 (1 (3.0 3 1 1)))) ((2 4) ((1 (1.0 7)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (4 1.0 3)) (1 (3 1)))) ((2 4) ((1 (7.0 1)) (1 (3.0 4 1.0)))) ((2 4) ((1 (3.0 1)) (1 (3.0 1)))) ((2 4) ((1 (4.0 1.0 1 2)) (1 (4 1.0 3)))) ((2 4) ((1 (1 1)) (1 (4.0 1.0 1 2)))) ((2 4) ((1 (3 1)) (1 (4.0 1.0 3)))) ((2 4) (1.0 1)) ((2 4) (1 (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 1 2)))) ((2 4) (1 (1 (3.0 4 1.0)))) ((2 4) ((1 (1.0 7)) (1 (4.0 1.0 3)))) ((2 4) (1 (1 (1.0 4 1.0 2)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) ((1 (1.0 1)) (1 (3 4 1.0)))) ((2 4) ((1 (2.0 4 1.0 1)) (1 (4.0 1.0 3)))) ((2 4) ((1 (6.0 1 1)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) 1.0)) ((2 4) (1 (1 (1.0 3)))) ((2 4) ((1 (2.0 4 1.0 1)) (1 (7.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) ((1 (4.0 1.0 3)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) 1.0)) ((2 4) ((1 (7 1)) (1 (1 3)))) ((2 4) ((1 (1 1)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) (1 (7.0 1)))) ((2 4) ((1 (1 3)) (1 (1.0 7)))) ((2 4) ((1 (2.0 3 3)) 1.0)) ((2 4) ((1 (1.0 7)) (1 (1.0 4 1.0 1 1)))) ((2 4) ((1 (1.0 4 1.0 2)) (1 (3.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) (1 (3.0 3 2)))) ((2 4) ((1 (7.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) (1.0 1)) ((2 4) ((1 (1 2 4 1.0)) (1 (4.0 1.0 3)))) ((2 4) ((1 (3.0 4 1.0)) (1 (2.0 4 1.0 1)))) ((2 4) ((1 (1.0 3)) (1 (3.0 4 1.0)))) ((2 4) ((1 (3.0 1)) (1 (2.0 3 3)))) ((2 4) ((1 (4.0 1.0 3)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) (1 (1.0 3)))) ((2 4) ((1 (3.0 4 1.0)) (1 (7.0 1)))) ((2 4) ((1 (3.0 4 1.0)) (1 (2.0 1 2 3)))) ((2 4) (1.0 (1 (4 1.0 3)))) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 3)) (1 (3.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 6 1)))) ((2 4) (1.0 1)) ((2 4) ((1 (3 1 2 2)) (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 3)))) ((2 4) ((1 (6.0 1 1)) (1 (1.0 6 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 7)))) ((2 4) ((1 (1.0 1)) (1 (1.0 7)))) ((2 4) ((1 (3.0 3 2)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (3.0 4 1.0)))) ((2 4) ((1 (2.0 1 2 3)) (1 (1.0 7)))) ((2 4) ((1 (1.0 7)) (1 (1.0 1)))) ((2 4) ((1 (2.0 4 1.0 1)) 1.0)) ((2 4) ((1 (3 4 1.0)) (1 (1.0 2 1)))) ((2 4) (1.0 (1 (1.0 7)))) ((2 4) ((1 (3.0 4 1.0)) (1 (7.0 1)))) ((2 4) ((1 (4.0 1.0 3)) (1 (4.0 1.0 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (375)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (875)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (875)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((0 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((1 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((2 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((2 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((2 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((2 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((3 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((3 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((3 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((3 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((4 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((4 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((4 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((4 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((4 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((5 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((5 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((6 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((6 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((6 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((6 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((7 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((7 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((7 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((8 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((8 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((8 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((8 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((9 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((9 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((9 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((9 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((10 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((10 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((10 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((10 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((11 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((11 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((11 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((11 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((12 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((12 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((12 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((12 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((13 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((13 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((13 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((14 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((14 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((14 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((15 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((15 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((16 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((16 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((16 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((16 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((16 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((16 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((17 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((17 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((17 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((17 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((18 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((18 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((19 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((19 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((19 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((19 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((20 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((20 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((20 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((20 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((20 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((21 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((21 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((21 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((21 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((21 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((21 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((21 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((22 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((23 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((23 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((23 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((24 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((24 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((24 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((25 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((25 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((25 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((25 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((26 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((26 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((26 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((26 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((27 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((27 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((27 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((27 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((28 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((28 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((29 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((29 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((29 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((29 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((29 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((30 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((30 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((30 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((30 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((30 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((31 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((31 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((31 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((32 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((32 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((33 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((33 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((34 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((34 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((34 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((34 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((35 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((35 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((35 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((36 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((36 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((36 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((36 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((37 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((37 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((38 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((38 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((38 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((38 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((38 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((38 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((39 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((39 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((39 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((39 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((39 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((39 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((40 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((40 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((40 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((41 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((41 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((41 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((41 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((42 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((42 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((42 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((43 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((43 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((43 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((44 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((44 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((44 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((45 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((45 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((45 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((46 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((46 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((46 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((46 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((46 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((47 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((48 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((48 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((48 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((49 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((50 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((50 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((50 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((50 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((50 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((51 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((51 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((51 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((51 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((51 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((52 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((52 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((53 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((53 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((53 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((53 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((53 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((54 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((54 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((55 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((55 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((55 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((55 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((56 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((56 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((56 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((56 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((57 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((57 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((57 1 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((57 1 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((58 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((58 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((58 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((59 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((60 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((60 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((60 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((60 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((61 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((61 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((61 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((61 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((61 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((62 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((63 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((63 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((63 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((63 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((63 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((63 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((63 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((64 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((64 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((64 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((64 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((65 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((65 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((65 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((65 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((65 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((66 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((66 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((67 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((67 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((67 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((68 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((68 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((69 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((69 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((69 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((69 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((70 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((70 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((70 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((70 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((71 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t))) ((71 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((71 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((72 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((72 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((72 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((72 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((73 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((73 0 3 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((73 0 3 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((74 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((74 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((74 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((74 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((74 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((74 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((75 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((76 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((76 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((76 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((76 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((76 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((77 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((77 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :ppp) :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (79/2 (((2 4) ((1 (-1 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 3)))) ((2 4) (2)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 1 2)))) ((2 4) (1.0 1)) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (2.0 1 1)) (1 (1.0 3)))) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1 1)) (1 (1.0 3)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1 (1 (3.0 1)))) ((2 4) (1.0 (1 (3.0 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (2)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 2 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 3)))) ((2 4) ((1 (1 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) ((1 (1.0 1)) (1 (3.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 2 1)))) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) ((1 (3 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) (2)) ((2 4) (2)) ((2 4) ((1 (1.0 3)) (1 (1.0 3)))) ((2 4) ((1 (1.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((1 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((1 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((1 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((2 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((2 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((3 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((4 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((4 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((4 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((4 1 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((7 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((7 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((8 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((10 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((11 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((11 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((11 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((11 0 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((11 0 2 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((11 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((12 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((12 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((13 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((16 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((16 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((17 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((18 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((19 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((19 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((19 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((21 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((21 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((21 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((21 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((21 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((23 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((24 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((27 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((28 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((28 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((29 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((29 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((29 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((29 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((29 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((31 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((32 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((33 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((33 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((33 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((34 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((34 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((35 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((35 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((35 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((35 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((35 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((36 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((39 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((39 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((40 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((41 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((43 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((44 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((44 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((44 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((44 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((47 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((48 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((48 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((48 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((49 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((49 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((49 0 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((49 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((49 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((50 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((51 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((54 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((54 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((54 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((54 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((55 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((56 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((56 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((57 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((58 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((59 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((59 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((59 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((61 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((61 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((61 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((61 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((64 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((64 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((65 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((66 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((66 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((66 1 2 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((67 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((67 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((68 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((70 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((71 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((71 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((71 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((71 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((71 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((72 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((72 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((73 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((73 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((76 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((76 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((77 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((77 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (79/2 (((2 4) (-1 (1 (-1 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1 1)))) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1 1)) 1.0)) ((2 4) (2)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (2000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (2000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (1000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (1000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote (((0 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((0 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((2 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((2 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((4 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((5 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((5 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((7 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((7 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((10 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((10 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((13 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((14 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((15 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((17 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((17 1 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((17 1 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((17 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((17 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((19 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((19 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((20 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((20 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((20 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((22 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((22 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((22 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((25 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((25 0 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((25 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((25 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((26 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((26 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((28 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((28 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((31 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((31 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((32 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((34 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((34 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((37 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((38 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((39 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((39 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((42 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((42 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((42 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((42 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((44 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((44 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t))) ((44 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((44 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((46 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((46 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((49 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((49 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((51 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((52 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((53 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((53 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((56 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((58 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((59 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((59 0 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((61 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((61 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "." :from-file t))) ((62 0 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((62 0 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :f) :from-file t))) ((63 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((63 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((66 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((66 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((68 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((68 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((69 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :pp) :from-file t))) ((70 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax 0 :deltay 1.5 :dynamics (quote :p) :from-file t))) ((71 1 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext ">" :from-file t))) ((71 1 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.3 :deltay 1.5 :dynamics (quote :fff) :from-file t))) ((74 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.1 :deltay 1.5 :dynamics (quote :mf) :from-file t))) ((76 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((76 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "_" :from-file t))) ((76 1 0) (if (find-class (quote vel-extra) nil) (make-instance (quote vel-extra) :deltax -0.2 :deltay 1.5 :dynamics (quote :ff) :from-file t))) ((78 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 2.5 :thetext ">" :from-file t))) ((78 0 1 0) (if (find-class (quote text-extra) nil) (make-instance (quote text-extra) :deltax -0.1 :deltay 1 :thetext "'" :from-file t)))))) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))) nil "score-preview"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 488 447) (om-make-point 171 33) (list "unnamed (bass staff)" " ") "(\"unnamed (bass staff)\" \" \") " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "voice-articulations-lines 3" (om-load-patch-abs1 "voice-articulations-lines" (quote ((let ((box (om-load-boxcall (quote abstraction) "slur-lines" (om-load-patch-abs1 "slur-lines" (quote ((let ((box (om-load-boxcall (quote genfun) "MK-LINE" (quote om-sibelius::mk-line) (quote ((om-load-inputfun (quote input-funbox) "voice or poly" "SELF" (quote om-sibelius::ni)) (om-load-inputfun (quote input-funbox) "list" "CHORD1" (list 9900)) (om-load-inputfun (quote input-funbox) "list" "CHORD2" (list 9800)) (om-load-inputfun (quote input-funbox) "string" "LINE" "Slur above"))) (om-make-point 198 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 250 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 351 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 1192/5 409) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 1532/5 11) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 135 105/2) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1292/5 971/4) (om-make-point 88 30) "Slur below" "\"Slur below\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 0 2 nil 0) (6 0 0 3 nil 0) (4 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 4237/8 575) nil nil nil "slur-lines"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "articulations" (om-load-patch-abs1 "articulations" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 168 279) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 305 370) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PARSE-INTEGER" (quote parse-integer) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 214 306) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 292 249) (om-make-point 34 30) " " "\" \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SPLIT-SEQUENCE" (quote split-sequence) (quote ((om-load-inputfun (quote input-funbox) "SEPARATOR-BAG" "SEPARATOR-BAG" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 295 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRINGP" (quote stringp) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 169 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 42 419) (om-make-point 592 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 312 500) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 464 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 512 26) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 341 588) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 237 583) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 3 0 nil 0) (7 0 3 1 nil 0) (7 0 4 0 nil 0) (4 0 5 0 nil 0) (0 0 5 1 nil 0) (7 0 5 2 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (6 1 9 0 nil 0) (6 0 10 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 183 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 163 365) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 262 271) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 233 468) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 124 322) (om-make-point 304 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NULL 2" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 188 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" (quote t)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 238 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 341 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 252 386) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 394 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 230 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 406 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 413 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 263 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 313 469) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 177 469) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 2 0 nil 0) (0 0 2 1 nil 0) (5 0 2 2 nil 0) (8 0 3 0 nil 0) (1 0 4 0 nil 0) (6 1 4 1 nil 0) (7 0 5 0 nil 0) (8 0 5 1 nil 0) (2 0 6 0 nil 0) (10 0 7 1 nil 0) (11 0 8 0 nil 0) (11 0 9 0 nil 0) (9 0 10 0 nil 0) (4 0 12 0 nil 0) (6 0 13 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 168 426) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 210 22) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 349/2 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 285/2 71) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 9057/20 142) nil (list (list (list 0 2) (list 1 4) (list 3 5) (list 5 (list 4 5)) (list 6 4) (list 8 1) (list 10 5) (list 13 4) (list 15 5) (list 16 1) (list 17 2) (list 18 4) (list 19 5) (list 21 (list 4 5)) (list 24 5) (list 26 4) (list 27 (list 4 5)) (list 28 1) (list 29 2) (list 30 5) (list 31 4) (list 33 2) (list 36 1) (list 37 4) (list 38 4) (list 40 5) (list 41 5) (list 43 (list 4 5)))) nil "articulations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 30 268) (om-make-point 44 30) -3/8 "-3/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 44 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 563 530) (om-make-point 90 30) (list 6700 6600) "(6700 6600)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 542 693) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1548/5 485/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1118/5 475/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1158/5 835/2) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 768/5 535/2) (om-make-point 48 30) (list 2 4) "(2 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 558/5 663/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 713/5 915/2) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1951/10 637/2) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 811/10 475/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1618/5 369/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1358/5 283/2) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 721/10 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 291/10 139) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 973/5 387/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 908/5 291/2) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 469 236) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 137 666) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 0" 0 (om-make-point 82 13) "" "input 0" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (4 0 0 1 nil 0) (22 0 1 0 nil 0) (2 0 3 0 nil 0) (13 0 3 1 nil 0) (0 0 5 0 nil 0) (14 0 6 0 nil 0) (18 0 7 0 nil 0) (3 0 10 0 nil 0) (9 0 10 1 nil 0) (10 0 11 1 nil 0) (12 0 11 2 nil 0) (8 0 11 3 nil 0) (7 0 12 1 nil 0) (6 0 12 4 nil 0) (16 0 13 0 nil 0) (15 0 14 0 nil 0) (22 0 14 1 nil 0) (17 0 16 0 nil 0) (22 0 16 1 nil 0) (19 0 18 0 nil 0) (22 0 18 1 nil 0) (1 0 20 0 nil 0) (11 0 21 0 nil 0))) 7.04 nil "" (om-make-point 198 23) (om-make-point 1029 722)) (quote ((om-load-inputfun (quote input-funbox) "" "input 0" nil))) (om-make-point 41177/60 1991/12) nil (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (79/2 (((2 4) (-1 (1 (-1 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1 1)))) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1 1)) 1.0)) ((2 4) (2)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (2000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (2000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (1000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (1000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (list (list 0 4) (list 1 5) (list 2 (list 2 5)) (list 3 5) (list 4 5) (list 5 5) (list 9 (list 1 5)) (list 10 (list 4 5)) (list 11 4) (list 12 (list 4 5)) (list 13 (list 2 5)) (list 14 5) (list 15 (list 1 5)) (list 16 4) (list 17 5) (list 18 5) (list 19 4) (list 21 5) (list 24 5) (list 25 (list 1 5)) (list 26 (list 4 5)) (list 27 (list 2 5)) (list 28 4) (list 29 5) (list 30 5) (list 33 5) (list 35 4) (list 36 5) (list 37 (list 1 5)) (list 38 4) (list 39 5) (list 40 5) (list 41 4) (list 44 5) (list 46 (list 4 5)) (list 47 (list 2 5))) (list (list 21 26 "Slur below") (list 62 66 "Slur below") (list 89 93 "Slur below") (list 121 125 "Slur below"))) nil "voice-articulations-lines"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mode-III" (om-load-patch-abs1 "mode-III" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 563 119) (om-make-point 146 30) (list 1 1 1 2 1 1 1 1 1 1 1) "(1 1 1 2 1 1 1 1 1 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 547 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 31 125) (om-make-point 422 30) (list 7500 7400 6900 (list 6700 6600) 6000 5600 5300 4700 4000 3400 2500) " (7500 7400 6900 (6700 6600) 6000 5600 5300 4700 4000 3400 2500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 438 441) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 414 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 396 374) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 333 240) (om-make-point 515 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 489 51) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 477 16) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 507 16) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 517 128) (om-make-point 26 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 566 71) (om-make-point 39 30) 1/8 "1/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 493 609) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "voice" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 786 96) (om-make-point 247 30) (list "1 5" "2 5" 4 (list nil nil) 4 "4 5" nil 5 5 5 5) "(\"1 5\" \"2 5\" 4 (nil nil) 4 \"4 5\" nil 5 5 5 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 484 525) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n-repet" 0 (om-make-point 525 398) "" "n-repet" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 621 49) (om-make-point 306 30) (list 115 115 85 (list 40 55) 100 115 85 115 115 127 127) "(115 115 85 (40 55) 100 115 85 115 115 127 127)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 1 0 nil 0) (0 0 1 1 nil 0) (5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 0 nil 0) (2 0 6 0 nil 0) (1 0 6 1 nil 0) (16 0 6 2 nil 0) (13 0 6 3 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0) (8 0 7 2 nil 0) (7 0 10 0 nil 0) (11 0 10 1 nil 0) (14 0 12 0 nil 0) (3 0 14 0 nil 0) (15 0 14 1 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 1045 528)) (quote ((om-load-inputfun (quote input-funbox) "" "n-repet" nil))) (om-make-point 729 73) nil (list (list (list (list 6000 4700 7400 3400 4000 2500 (list 6700 6600) 5300 7500 5600 6900) (list (list 3/4) (list 9/8) (list 1/4) (list 11/8) (list 5/4) (list 3/2) (list 1/2 5/8) (list 1) (list 1/8) (list 7/8) (list 3/8)) (list 100 115 115 127 115 127 (list 40 55) 85 115 115 85) (list 4 5 "2 5" 5 5 5 (list nil nil) nil "1 5" "4 5" 4)) (list (list 5600 7400 4000 7500 6900 3400 4700 6000 5300 2500 (list 6700 6600)) (list (list 7/8) (list 1/4) (list 5/4) (list 1/8) (list 3/8) (list 11/8) (list 9/8) (list 3/4) (list 1) (list 3/2) (list 1/2 5/8)) (list 115 115 115 115 85 127 115 100 85 127 (list 40 55)) (list "4 5" "2 5" 5 "1 5" 4 5 5 4 nil 5 (list nil nil))) (list (list 4000 7500 5600 7400 6000 2500 4700 (list 6700 6600) 3400 5300 6900) (list (list 5/4) (list 1/8) (list 7/8) (list 1/4) (list 3/4) (list 3/2) (list 9/8) (list 1/2 5/8) (list 11/8) (list 1) (list 3/8)) (list 115 115 115 115 100 127 115 (list 40 55) 127 85 85) (list 5 "1 5" "4 5" "2 5" 4 5 5 (list nil nil) 5 nil 4)) (list (list 4000 7500 6000 2500 4700 6900 (list 6700 6600) 3400 5300 5600 7400) (list (list 5/4) (list 1/8) (list 3/4) (list 3/2) (list 9/8) (list 3/8) (list 1/2 5/8) (list 11/8) (list 1) (list 7/8) (list 1/4)) (list 115 115 100 127 115 85 (list 40 55) 127 85 115 115) (list 5 "1 5" 4 5 5 4 (list nil nil) 5 nil "4 5" "2 5")))) "x" "mode-III"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 189 386) (om-make-point 100 70) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (39 (((2 4) ((1 (4 1.0 3)) (1 (7.0 1)))) ((2 4) ((1 (3.0 4 1.0)) (1 (1.0 7)))) ((2 4) ((1 (1.0 7)) (1 (2.0 1 2 3)))) ((2 4) ((1 (7 1)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (3.0 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 3)))) ((2 4) (1.0 (1 (1 1)))) ((2 4) ((1 (1.0 3 4)) 1.0)) ((2 4) (1 (1 (1.0 1 2 4)))) ((2 4) ((1 (1.0 7)) 1)) ((2 4) ((1 (3.0 4 1.0)) (1 (4.0 1.0 3)))) ((2 4) ((1 (3.0 4 1)) (1 (7.0 1)))) ((2 4) (1.0 (1 (3.0 3 1 1)))) ((2 4) ((1 (1.0 7)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (4 1.0 3)) (1 (3 1)))) ((2 4) ((1 (7.0 1)) (1 (3.0 4 1.0)))) ((2 4) ((1 (3.0 1)) (1 (3.0 1)))) ((2 4) ((1 (4.0 1.0 1 2)) (1 (4 1.0 3)))) ((2 4) ((1 (1 1)) (1 (4.0 1.0 1 2)))) ((2 4) ((1 (3 1)) (1 (4.0 1.0 3)))) ((2 4) (1.0 1)) ((2 4) (1 (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 1 2)))) ((2 4) (1 (1 (3.0 4 1.0)))) ((2 4) ((1 (1.0 7)) (1 (4.0 1.0 3)))) ((2 4) (1 (1 (1.0 4 1.0 2)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) ((1 (1.0 1)) (1 (3 4 1.0)))) ((2 4) ((1 (2.0 4 1.0 1)) (1 (4.0 1.0 3)))) ((2 4) ((1 (6.0 1 1)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) 1.0)) ((2 4) (1 (1 (1.0 3)))) ((2 4) ((1 (2.0 4 1.0 1)) (1 (7.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) ((1 (4.0 1.0 3)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) 1.0)) ((2 4) ((1 (7 1)) (1 (1 3)))) ((2 4) ((1 (1 1)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) (1 (7.0 1)))) ((2 4) ((1 (1 3)) (1 (1.0 7)))) ((2 4) ((1 (2.0 3 3)) 1.0)) ((2 4) ((1 (1.0 7)) (1 (1.0 4 1.0 1 1)))) ((2 4) ((1 (1.0 4 1.0 2)) (1 (3.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) (1 (3.0 3 2)))) ((2 4) ((1 (7.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) (1.0 1)) ((2 4) ((1 (1 2 4 1.0)) (1 (4.0 1.0 3)))) ((2 4) ((1 (3.0 4 1.0)) (1 (2.0 4 1.0 1)))) ((2 4) ((1 (1.0 3)) (1 (3.0 4 1.0)))) ((2 4) ((1 (3.0 1)) (1 (2.0 3 3)))) ((2 4) ((1 (4.0 1.0 3)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) (1 (1.0 3)))) ((2 4) ((1 (3.0 4 1.0)) (1 (7.0 1)))) ((2 4) ((1 (3.0 4 1.0)) (1 (2.0 1 2 3)))) ((2 4) (1.0 (1 (4 1.0 3)))) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 3)) (1 (3.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 6 1)))) ((2 4) (1.0 1)) ((2 4) ((1 (3 1 2 2)) (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 3)))) ((2 4) ((1 (6.0 1 1)) (1 (1.0 6 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 7)))) ((2 4) ((1 (1.0 1)) (1 (1.0 7)))) ((2 4) ((1 (3.0 3 2)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (3.0 4 1.0)))) ((2 4) ((1 (2.0 1 2 3)) (1 (1.0 7)))) ((2 4) ((1 (1.0 7)) (1 (1.0 1)))) ((2 4) ((1 (2.0 4 1.0 1)) 1.0)) ((2 4) ((1 (3 4 1.0)) (1 (1.0 2 1)))) ((2 4) (1.0 (1 (1.0 7)))) ((2 4) ((1 (3.0 4 1.0)) (1 (7.0 1)))) ((2 4) ((1 (4.0 1.0 3)) (1 (4.0 1.0 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (375)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (750)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (875)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (875)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (79/2 (((2 4) ((1 (-1 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 3)))) ((2 4) (2)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 1 2)))) ((2 4) (1.0 1)) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (2.0 1 1)) (1 (1.0 3)))) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1 1)) (1 (1.0 3)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1 (1 (3.0 1)))) ((2 4) (1.0 (1 (3.0 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (2)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 2 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 3)))) ((2 4) ((1 (1 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) ((1 (1.0 1)) (1 (3.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 2 1)))) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) ((1 (3 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) (2)) ((2 4) (2)) ((2 4) ((1 (1.0 3)) (1 (1.0 3)))) ((2 4) ((1 (1.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (79/2 (((2 4) (-1 (1 (-1 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1 1)))) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1 1)) 1.0)) ((2 4) (2)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (1.0 1)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 -1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (2000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (2000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (1000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2500)) :ldur (quote (1000)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3400)) :ldur (quote (500)) :lvel (quote (127)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (1000)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 814 440) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g) (quote g) (quote f)) 24 2)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 869 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 668 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 150 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 467 496) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 393 406) (om-make-point 184 30) (list "unnamed (treble staff)" " ") "(\"unnamed (treble staff)\" \" \")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "voice-articulations-lines 2" (om-load-patch-abs1 "voice-articulations-lines" (quote ((let ((box (om-load-boxcall (quote abstraction) "slur-lines 2" (om-load-patch-abs1 "slur-lines" (quote ((let ((box (om-load-boxcall (quote genfun) "MK-LINE" (quote om-sibelius::mk-line) (quote ((om-load-inputfun (quote input-funbox) "voice or poly" "SELF" (quote om-sibelius::ni)) (om-load-inputfun (quote input-funbox) "list" "CHORD1" (list 9900)) (om-load-inputfun (quote input-funbox) "list" "CHORD2" (list 9800)) (om-load-inputfun (quote input-funbox) "string" "LINE" "Slur above"))) (om-make-point 198 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 250 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 351 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 1192/5 409) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 1532/5 11) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 135 105/2) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1292/5 971/4) (om-make-point 88 30) "Slur below" "\"Slur below\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 0 2 nil 0) (6 0 0 3 nil 0) (4 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 431 497)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 4021/8 534) nil nil "l" "slur-lines"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "articulations" (om-load-patch-abs1 "articulations" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 168 279) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 305 370) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PARSE-INTEGER" (quote parse-integer) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 214 306) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 292 249) (om-make-point 34 30) " " "\" \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SPLIT-SEQUENCE" (quote split-sequence) (quote ((om-load-inputfun (quote input-funbox) "SEPARATOR-BAG" "SEPARATOR-BAG" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 295 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRINGP" (quote stringp) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 169 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 42 419) (om-make-point 592 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 312 500) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 464 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 512 26) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 341 588) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 237 583) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 3 0 nil 0) (7 0 3 1 nil 0) (7 0 4 0 nil 0) (4 0 5 0 nil 0) (0 0 5 1 nil 0) (7 0 5 2 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (6 1 9 0 nil 0) (6 0 10 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 183 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 163 365) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 262 271) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 233 468) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 124 322) (om-make-point 304 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NULL 2" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 188 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" (quote t)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 238 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 341 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 252 386) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 394 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 230 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 406 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 413 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 263 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 313 469) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 177 469) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 2 0 nil 0) (0 0 2 1 nil 0) (5 0 2 2 nil 0) (8 0 3 0 nil 0) (1 0 4 0 nil 0) (6 1 4 1 nil 0) (7 0 5 0 nil 0) (8 0 5 1 nil 0) (2 0 6 0 nil 0) (10 0 7 1 nil 0) (11 0 8 0 nil 0) (11 0 9 0 nil 0) (9 0 10 0 nil 0) (4 0 12 0 nil 0) (6 0 13 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 168 426) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 210 22) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 349/2 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 285/2 71) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 8917/20 128) nil (list (list (list 0 2) (list 1 4) (list 3 5) (list 5 (list 4 5)) (list 6 4) (list 8 1) (list 10 5) (list 13 4) (list 15 5) (list 16 1) (list 17 2) (list 18 4) (list 19 5) (list 21 (list 4 5)) (list 24 5) (list 26 4) (list 27 (list 4 5)) (list 28 1) (list 29 2) (list 30 5) (list 31 4) (list 33 2) (list 36 1) (list 37 4) (list 38 4) (list 40 5) (list 41 5) (list 43 (list 4 5)))) nil "articulations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT-ONCE" (quote flat-once) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 561 670) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 30 268) (om-make-point 44 30) -1/8 "-1/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 44 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 567 619) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 550 449) (om-make-point 251 30) (list (list 7200 7000) (list 6800 6500) (list 6400 6200)) " ((7200 7000) (6800 6500) (6400 6200))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 559 720) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1548/5 485/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1118/5 475/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1158/5 835/2) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 768/5 535/2) (om-make-point 48 30) (list 2 4) "(2 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 558/5 663/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 713/5 915/2) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1951/10 637/2) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 811/10 475/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1618/5 369/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1358/5 283/2) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 721/10 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 291/10 139) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 973/5 387/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 908/5 291/2) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 464 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 137 666) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 0" 0 (om-make-point 82 13) "" "input 0" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 0 nil 0) (24 0 1 0 nil 0) (5 0 2 0 nil 0) (3 0 4 0 nil 0) (15 0 4 1 nil 0) (0 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 7 0 nil 0) (16 0 8 0 nil 0) (20 0 9 0 nil 0) (4 0 12 0 nil 0) (11 0 12 1 nil 0) (12 0 13 1 nil 0) (14 0 13 2 nil 0) (10 0 13 3 nil 0) (9 0 14 1 nil 0) (8 0 14 4 nil 0) (18 0 15 0 nil 0) (17 0 16 0 nil 0) (24 0 16 1 nil 0) (19 0 18 0 nil 0) (24 0 18 1 nil 0) (21 0 20 0 nil 0) (24 0 20 1 nil 0) (1 0 22 0 nil 0) (13 0 23 0 nil 0))) 7.04 nil "" (om-make-point 190 59) (om-make-point 837 687)) (quote ((om-load-inputfun (quote input-funbox) "" "input 0" nil))) (om-make-point 28397/60 1979/12) nil (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (79/2 (((2 4) ((1 (-1 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 3)))) ((2 4) (2)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 1 2)))) ((2 4) (1.0 1)) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (2.0 1 1)) (1 (1.0 3)))) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1 1)) (1 (1.0 3)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1 (1 (3.0 1)))) ((2 4) (1.0 (1 (3.0 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (2)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 2 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 3)))) ((2 4) ((1 (1 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 1)) (1 (3 1)))) ((2 4) ((1 (3.0 1)) 1.0)) ((2 4) (2)) ((2 4) (1.0 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) ((1 (1.0 1)) (1 (3.0 1)))) ((2 4) (2.0)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 (1 (1.0 2 1)))) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) (1.0 1)) ((2 4) (2.0)) ((2 4) (2)) ((2 4) ((1 (3.0 1)) 1)) ((2 4) (1.0 (1 (1.0 1)))) ((2 4) ((1 (3 1)) 1.0)) ((2 4) ((1 (1.0 3)) 1.0)) ((2 4) (2)) ((2 4) (2)) ((2 4) ((1 (1.0 3)) (1 (1.0 3)))) ((2 4) ((1 (1.0 -1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (250)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (250)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7900)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (750)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (2000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (list (list 2 1) (list 3 1) (list 4 4) (list 5 4) (list 6 (list 1 5)) (list 10 4) (list 11 4) (list 12 4) (list 13 (list 1 5)) (list 14 1) (list 15 1) (list 16 4) (list 20 4) (list 21 4) (list 24 4) (list 25 1) (list 26 1) (list 27 4) (list 28 4) (list 34 4) (list 35 (list 1 5)) (list 36 4) (list 37 4) (list 38 4) (list 39 1) (list 40 1) (list 43 (list 1 5)) (list 44 4) (list 48 4) (list 49 4) (list 50 4) (list 51 4) (list 52 (list 1 5)) (list 58 1) (list 59 1) (list 60 (list 1 5)) (list 61 4) (list 62 4) (list 66 1) (list 67 1) (list 70 4) (list 71 4) (list 74 4) (list 75 (list 1 5)) (list 79 4) (list 80 4) (list 81 1) (list 82 1) (list 83 4) (list 84 4) (list 85 4) (list 86 (list 1 5)) (list 87 4) (list 88 1) (list 89 1) (list 93 4)) (list (list 4 6 "Slur below") (list 29 31 "Slur below") (list 54 56 "Slur below") (list 85 87 "Slur below") (list 130 132 "Slur below") (list 149 150 "Slur below") (list 183 185 "Slur below") (list 197 198 "Slur below") (list 0 3 "Slur below") (list 48 51 "Slur below") (list 70 73 "Slur below") (list 88 91 "Slur below") (list 126 129 "Slur below") (list 151 154 "Slur below") (list 160 163 "Slur below") (list 207 210 "Slur below") (list 14 20 "Slur below") (list 34 41 "Slur below") (list 63 69 "Slur below") (list 96 103 "Slur below") (list 118 125 "Slur below") (list 141 148 "Slur below") (list 168 175 "Slur below") (list 199 204 "Slur below"))) nil "voice-articulations-lines"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "voice-articulations-lines" (om-load-patch-abs1 "voice-articulations-lines" (quote ((let ((box (om-load-boxcall (quote abstraction) "articulations" (om-load-patch-abs1 "articulations" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 168 279) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 305 370) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PARSE-INTEGER" (quote parse-integer) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil))) (om-make-point 214 306) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 292 249) (om-make-point 34 30) " " "\" \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SPLIT-SEQUENCE" (quote split-sequence) (quote ((om-load-inputfun (quote input-funbox) "SEPARATOR-BAG" "SEPARATOR-BAG" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 295 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRINGP" (quote stringp) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 169 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 42 419) (om-make-point 592 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 312 500) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 464 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 512 26) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 341 588) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 237 583) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (2 0 3 0 nil 0) (7 0 3 1 nil 0) (7 0 4 0 nil 0) (4 0 5 0 nil 0) (0 0 5 1 nil 0) (7 0 5 2 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (6 1 9 0 nil 0) (6 0 10 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 183 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 163 365) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 262 271) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 233 468) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 124 322) (om-make-point 304 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NULL 2" (quote null) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 188 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" (quote t)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 238 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 341 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 252 386) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 394 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 230 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 406 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 413 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 263 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 313 469) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 177 469) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 2 0 nil 0) (0 0 2 1 nil 0) (5 0 2 2 nil 0) (8 0 3 0 nil 0) (1 0 4 0 nil 0) (6 1 4 1 nil 0) (7 0 5 0 nil 0) (8 0 5 1 nil 0) (2 0 6 0 nil 0) (10 0 7 1 nil 0) (11 0 8 0 nil 0) (11 0 9 0 nil 0) (9 0 10 0 nil 0) (4 0 12 0 nil 0) (6 0 13 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 168 426) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 210 22) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 349/2 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 285/2 71) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 9117/20 120) nil (list (list (list 0 2) (list 1 4) (list 3 5) (list 5 (list 4 5)) (list 6 4) (list 8 1) (list 10 5) (list 13 4) (list 15 5) (list 16 1) (list 17 2) (list 18 4) (list 19 5) (list 21 (list 4 5)) (list 24 5) (list 26 4) (list 27 (list 4 5)) (list 28 1) (list 29 2) (list 30 5) (list 31 4) (list 33 2) (list 36 1) (list 37 4) (list 38 4) (list 40 5) (list 41 5) (list 43 (list 4 5)))) nil "articulations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 561 507) (om-make-point 80 30) (list 9900 9800) "(9900 9800)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "slur-lines" (om-load-patch-abs1 "slur-lines" (quote ((let ((box (om-load-boxcall (quote genfun) "MK-LINE" (quote om-sibelius::mk-line) (quote ((om-load-inputfun (quote input-funbox) "voice or poly" "SELF" (quote om-sibelius::ni)) (om-load-inputfun (quote input-funbox) "list" "CHORD1" (list 9900)) (om-load-inputfun (quote input-funbox) "list" "CHORD2" (list 9800)) (om-load-inputfun (quote input-funbox) "string" "LINE" "Slur above"))) (om-make-point 198 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 250 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 351 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 1192/5 409) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 1532/5 11) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 135 105/2) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1292/5 971/4) (om-make-point 89 30) "Slur above" "\"Slur above\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 0 2 nil 0) (6 0 0 3 nil 0) (4 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0))) 7.04 nil "" (om-make-point 204 23) (om-make-point 506 574)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 4469/8 579) nil nil nil "slur-lines"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 561 695) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1548/5 485/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1118/5 475/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1158/5 835/2) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 768/5 535/2) (om-make-point 48 30) (list 2 4) "(2 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 558/5 663/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 713/5 915/2) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1951/10 637/2) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil 0 1)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 811/10 475/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1618/5 369/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1358/5 283/2) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 721/10 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 291/10 139) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 973/5 387/2) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 908/5 291/2) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 464 252) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 137 666) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 0" 0 (om-make-point 78 13) "" "input 0" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((20 0 0 0 nil 0) (9 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (12 0 4 0 nil 0) (16 0 5 0 nil 0) (11 0 8 0 nil 0) (7 0 8 1 nil 0) (8 0 9 1 nil 0) (10 0 9 2 nil 0) (6 0 9 3 nil 0) (5 0 10 1 nil 0) (4 0 10 4 nil 0) (14 0 11 0 nil 0) (13 0 12 0 nil 0) (20 0 12 1 nil 0) (15 0 14 0 nil 0) (20 0 14 1 nil 0) (17 0 16 0 nil 0) (20 0 16 1 nil 0) (0 0 18 0 nil 0) (9 0 19 0 nil 0))) 7.04 nil "" (om-make-point 372 26) (om-make-point 988 666)) (quote ((om-load-inputfun (quote input-funbox) "" "input 0" nil))) (om-make-point 13637/60 2147/12) nil (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (39 (((2 4) ((1 (4 1.0 3)) (1 (7.0 1)))) ((2 4) ((1 (3.0 4 1.0)) (1 (1.0 7)))) ((2 4) ((1 (1.0 7)) (1 (2.0 1 2 3)))) ((2 4) ((1 (7 1)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (3.0 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 3)))) ((2 4) (1.0 (1 (1 1)))) ((2 4) ((1 (1.0 3 4)) 1.0)) ((2 4) (1 (1 (1.0 1 2 4)))) ((2 4) ((1 (1.0 7)) 1)) ((2 4) ((1 (3.0 4 1.0)) (1 (4.0 1.0 3)))) ((2 4) ((1 (3.0 4 1)) (1 (7.0 1)))) ((2 4) (1.0 (1 (3.0 3 1 1)))) ((2 4) ((1 (1.0 7)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) 1.0)) ((2 4) ((1 (4 1.0 3)) (1 (3 1)))) ((2 4) ((1 (7.0 1)) (1 (3.0 4 1.0)))) ((2 4) ((1 (3.0 1)) (1 (3.0 1)))) ((2 4) ((1 (4.0 1.0 1 2)) (1 (4 1.0 3)))) ((2 4) ((1 (1 1)) (1 (4.0 1.0 1 2)))) ((2 4) ((1 (3 1)) (1 (4.0 1.0 3)))) ((2 4) (1.0 1)) ((2 4) (1 (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 1 2)))) ((2 4) (1 (1 (3.0 4 1.0)))) ((2 4) ((1 (1.0 7)) (1 (4.0 1.0 3)))) ((2 4) (1 (1 (1.0 4 1.0 2)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) ((1 (1.0 1)) (1 (3 4 1.0)))) ((2 4) ((1 (2.0 4 1.0 1)) (1 (4.0 1.0 3)))) ((2 4) ((1 (6.0 1 1)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) 1.0)) ((2 4) (1 (1 (1.0 3)))) ((2 4) ((1 (2.0 4 1.0 1)) (1 (7.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) ((1 (4.0 1.0 3)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) 1.0)) ((2 4) ((1 (7 1)) (1 (1 3)))) ((2 4) ((1 (1 1)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) (1 (7.0 1)))) ((2 4) ((1 (1 3)) (1 (1.0 7)))) ((2 4) ((1 (2.0 3 3)) 1.0)) ((2 4) ((1 (1.0 7)) (1 (1.0 4 1.0 1 1)))) ((2 4) ((1 (1.0 4 1.0 2)) (1 (3.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 7)))) ((2 4) ((1 (4.0 1.0 3)) (1 (3.0 3 2)))) ((2 4) ((1 (7.0 1)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (1.0 1)))) ((2 4) (1.0 1)) ((2 4) ((1 (1 2 4 1.0)) (1 (4.0 1.0 3)))) ((2 4) ((1 (3.0 4 1.0)) (1 (2.0 4 1.0 1)))) ((2 4) ((1 (1.0 3)) (1 (3.0 4 1.0)))) ((2 4) ((1 (3.0 1)) (1 (2.0 3 3)))) ((2 4) ((1 (4.0 1.0 3)) (1 (1.0 3)))) ((2 4) ((1 (1.0 1)) (1 (1.0 3)))) ((2 4) ((1 (3.0 4 1.0)) (1 (7.0 1)))) ((2 4) ((1 (3.0 4 1.0)) (1 (2.0 1 2 3)))) ((2 4) (1.0 (1 (4 1.0 3)))) ((2 4) (1.0 1)) ((2 4) ((1 (1.0 3)) (1 (3.0 1)))) ((2 4) ((1 (1.0 3)) (1 (1.0 6 1)))) ((2 4) (1.0 1)) ((2 4) ((1 (3 1 2 2)) (1 (1.0 3)))) ((2 4) ((1 (3.0 1)) (1 (4.0 1.0 3)))) ((2 4) ((1 (6.0 1 1)) (1 (1.0 6 1)))) ((2 4) ((1 (1.0 1)) (1 (1.0 1)))) ((2 4) ((1 (3.0 1)) (1 (1.0 7)))) ((2 4) ((1 (1.0 1)) (1 (1.0 7)))) ((2 4) ((1 (3.0 3 2)) 1.0)) ((2 4) ((1 (1.0 3)) (1 (3.0 4 1.0)))) ((2 4) ((1 (2.0 1 2 3)) (1 (1.0 7)))) ((2 4) ((1 (1.0 7)) (1 (1.0 1)))) ((2 4) ((1 (2.0 4 1.0 1)) 1.0)) ((2 4) ((1 (3 4 1.0)) (1 (1.0 2 1)))) ((2 4) (1.0 (1 (1.0 7)))) ((2 4) ((1 (3.0 4 1.0)) (1 (7.0 1)))) ((2 4) ((1 (4.0 1.0 3)) (1 (4.0 1.0 1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (375)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (125)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (1000)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (750)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (125)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (875)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (375)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (250)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (875)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (375)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (750)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (125)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (1000)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (1000)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (750)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (125)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (500)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (500)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (875)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (250)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (750)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (375)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (875)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (875)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (500)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9100)) :ldur (quote (500)) :lvel (quote (85)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8400)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9300)) :ldur (quote (375)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8800)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9200)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (250)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8200)) :ldur (quote (875)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (500)) :lvel (quote (55)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9000)) :ldur (quote (125)) :lvel (quote (115)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8500)) :ldur (quote (375)) :lvel (quote (86)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9900)) :ldur (quote (125)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (9800)) :ldur (quote (250)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (list (list 2 1) (list 3 (list 4 5)) (list 5 5) (list 8 2) (list 9 4) (list 10 5) (list 11 4) (list 12 (list 4 5)) (list 15 4) (list 16 5) (list 17 1) (list 19 2) (list 20 4) (list 21 5) (list 25 4) (list 26 5) (list 28 (list 4 5)) (list 29 1) (list 31 4) (list 32 2) (list 35 5) (list 37 4) (list 39 2) (list 40 (list 4 5)) (list 41 5) (list 42 1) (list 43 5) (list 45 4) (list 49 2) (list 50 1) (list 51 5) (list 54 (list 4 5)) (list 55 4) (list 56 5) (list 58 4) (list 60 4) (list 63 5) (list 64 (list 4 5)) (list 65 4) (list 66 2) (list 67 5) (list 69 1) (list 72 1) (list 73 2) (list 74 4) (list 76 (list 4 5)) (list 77 5) (list 80 4) (list 81 5) (list 86 2) (list 88 5) (list 89 1) (list 90 4) (list 91 5) (list 92 4) (list 95 (list 4 5)) (list 96 1) (list 97 (list 4 5)) (list 99 5) (list 102 4) (list 103 5) (list 104 2) (list 105 4) (list 112 1) (list 113 4) (list 114 4) (list 115 (list 4 5)) (list 116 2) (list 117 5) (list 118 5) (list 120 4) (list 125 (list 4 5)) (list 126 4) (list 128 2) (list 129 5) (list 130 5) (list 131 1) (list 132 2) (list 136 (list 4 5)) (list 137 5) (list 138 4) (list 139 1) (list 140 4) (list 143 5) (list 145 5) (list 147 4) (list 148 1) (list 149 4) (list 150 (list 4 5)) (list 151 5) (list 153 2) (list 156 1) (list 157 4) (list 158 4) (list 159 5) (list 162 (list 4 5)) (list 166 2) (list 167 5) (list 170 2) (list 171 4) (list 172 5) (list 173 4) (list 176 1) (list 178 5) (list 179 (list 4 5)) (list 181 5) (list 182 2) (list 183 4) (list 184 1) (list 185 5) (list 187 4) (list 188 (list 4 5))) (list (list 13 14 "Slur above") (list 41 42 "Slur above") (list 61 63 "Slur above") (list 86 87 "Slur above") (list 95 96 "Slur above") (list 111 112 "Slur above") (list 144 146 "Slur above") (list 175 176 "Slur above") (list 185 186 "Slur above") (list 199 201 "Slur above") (list 226 227 "Slur above") (list 268 269 "Slur above") (list 289 290 "Slur above") (list 300 302 "Slur above") (list 327 328 "Slur above") (list 360 361 "Slur above"))) nil "voice-articulations-lines"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 335 452) (om-make-point 108 30) (list "Piano" "Pno.") "(\"Piano\" \"Pno.\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->SIB" (quote om-sibelius::om->sib) (quote ((om-load-inputfun (quote input-funbox) "voice or poly" "SCORE-OBJECT" nil) (om-load-inputfun (quote input-funbox) "list of lists" "INSTRUMENTS" nil) (om-load-inputfun (quote input-funbox) "list of lists" "ARTICULATIONS" nil) (om-load-inputfun (quote input-funbox) "list of lists" "LINES" nil))) (om-make-point 78 548) (om-make-point 1003 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mode-II" (om-load-patch-abs1 "mode-II" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 558 111) (om-make-point 113 30) (list 1 2 2 3 1 1 1 1) "(1 2 2 3 1 1 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 499 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 38 116) (om-make-point 442 30) (list 7900 (list 7200 7000) (list 6800 6500) (list 6400 6300 6200) 6100 5900 5400 4500) " (7900 (7200 7000) (6800 6500) (6400 6300 6200) 6100 5900 5400 4500)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 437 441) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 414 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 396 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 331 214) (om-make-point 515 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 488 36) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 476 1) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 506 1) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 515 102) (om-make-point 26 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 555 51) (om-make-point 46 30) 1/16 "1/16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 493 609) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "voice" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 786 96) (om-make-point 237 30) (list "1 5" (list 1 1) (list nil nil) (list nil nil nil) 4 4 4 4) "(\"1 5\" (1 1) (nil nil) (nil nil nil) 4 4 4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 484 525) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 594 432) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 539 475) (om-make-point 24 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n-repet" 0 (om-make-point 525 398) "" "n-repet" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 621 49) (om-make-point 305 30) (list 115 (list 85 85) (list 55 40) (list 55 55 55) 100 100 100 100) "(115 (85 85) (55 40) (55 55 55) 100 100 100 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 1 0 nil 0) (0 0 1 1 nil 0) (5 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 0 nil 0) (2 0 6 0 nil 0) (1 0 6 1 nil 0) (18 0 6 2 nil 0) (13 0 6 3 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0) (8 0 7 2 nil 0) (7 0 10 0 nil 0) (11 0 10 1 nil 0) (14 0 12 0 nil 0) (3 0 14 0 nil 0) (16 0 14 1 nil 0) (17 0 16 0 nil 0) (15 0 16 1 nil 0))) 7.04 nil "" (om-make-point 252 23) (om-make-point 1082 674)) (quote ((om-load-inputfun (quote input-funbox) "" "n-repet" nil))) (om-make-point 519 72) nil (list (list (list (list (list 6800 6500) (list 7200 7000) 5900 5400 7900 (list 6400 6300 6200) 6100 4500) (list (list 1/4 5/16) (list 1/8 3/16) (list 5/8) (list 11/16) (list 1/16) (list 3/8 7/16 1/2) (list 9/16) (list 3/4)) (list (list 55 40) (list 85 85) 100 100 115 (list 55 55 55) 100 100) (list (list nil nil) (list 1 1) 4 4 "1 5" (list nil nil nil) 4 4)) (list (list 5900 7900 (list 7200 7000) 4500 (list 6400 6300 6200) 5400 6100 (list 6800 6500)) (list (list 5/8) (list 1/16) (list 1/8 3/16) (list 3/4) (list 3/8 7/16 1/2) (list 11/16) (list 9/16) (list 1/4 5/16)) (list 100 115 (list 85 85) 100 (list 55 55 55) 100 100 (list 55 40)) (list 4 "1 5" (list 1 1) 4 (list nil nil nil) 4 4 (list nil nil))) (list (list 5900 (list 7200 7000) 4500 6100 (list 6400 6300 6200) (list 6800 6500) 5400 7900) (list (list 5/8) (list 1/8 3/16) (list 3/4) (list 9/16) (list 3/8 7/16 1/2) (list 1/4 5/16) (list 11/16) (list 1/16)) (list 100 (list 85 85) 100 100 (list 55 55 55) (list 55 40) 100 115) (list 4 (list 1 1) 4 4 (list nil nil nil) (list nil nil) 4 "1 5")) (list (list 4500 5900 5400 (list 7200 7000) (list 6800 6500) 7900 6100 (list 6400 6300 6200)) (list (list 3/4) (list 5/8) (list 11/16) (list 1/8 3/16) (list 1/4 5/16) (list 1/16) (list 9/16) (list 3/8 7/16 1/2)) (list 100 100 100 (list 85 85) (list 55 40) 115 100 (list 55 55 55)) (list 4 4 4 (list 1 1) (list nil nil) "1 5" 4 (list nil nil nil))) (list (list 5400 6100 4500 5900 7900 (list 6400 6300 6200) (list 6800 6500) (list 7200 7000)) (list (list 11/16) (list 9/16) (list 3/4) (list 5/8) (list 1/16) (list 3/8 7/16 1/2) (list 1/4 5/16) (list 1/8 3/16)) (list 100 100 100 100 115 (list 55 55 55) (list 55 40) (list 85 85)) (list 4 4 4 4 "1 5" (list nil nil nil) (list nil nil) (list 1 1))) (list (list 7900 6100 5400 (list 6400 6300 6200) (list 7200 7000) (list 6800 6500) 4500 5900) (list (list 1/16) (list 9/16) (list 11/16) (list 3/8 7/16 1/2) (list 1/8 3/16) (list 1/4 5/16) (list 3/4) (list 5/8)) (list 115 100 100 (list 55 55 55) (list 85 85) (list 55 40) 100 100) (list "1 5" 4 4 (list nil nil nil) (list 1 1) (list nil nil) 4 4)) (list (list (list 6800 6500) 4500 7900 (list 6400 6300 6200) 6100 5400 (list 7200 7000) 5900) (list (list 1/4 5/16) (list 3/4) (list 1/16) (list 3/8 7/16 1/2) (list 9/16) (list 11/16) (list 1/8 3/16) (list 5/8)) (list (list 55 40) 100 115 (list 55 55 55) 100 100 (list 85 85) 100) (list (list nil nil) 4 "1 5" (list nil nil nil) 4 4 (list 1 1) 4)) (list (list 4500 5400 7900 5900 (list 7200 7000) (list 6400 6300 6200) 6100 (list 6800 6500)) (list (list 3/4) (list 11/16) (list 1/16) (list 5/8) (list 1/8 3/16) (list 3/8 7/16 1/2) (list 9/16) (list 1/4 5/16)) (list 100 100 115 100 (list 85 85) (list 55 55 55) 100 (list 55 40)) (list 4 4 "1 5" 4 (list 1 1) (list nil nil nil) 4 (list nil nil))))) "x" "mode-II"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 531 8) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mode-I" (om-load-patch-abs1 "mode-I" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 555 134) (om-make-point 146 30) (list 2 1 1 1 1 1 1 1 1 1 1) "(2 1 1 1 1 1 1 1 1 1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) "list to group" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "list of group lengths" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "normal or circular" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 512 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 511 446) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 414 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 396 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 332 228) (om-make-point 515 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 488 52) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 476 17) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 506 17) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 515 118) (om-make-point 26 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 555 67) (om-make-point 46 30) 1/32 "1/32" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 581 591) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "voice" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 778 146) (om-make-point 217 30) (list (list nil nil) 2 1 nil "4 5" 4 nil 5 nil 5 4) "((nil nil) 2 1 nil \"4 5\" 4 nil 5 nil 5 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 573 512) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 703 397) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 646 443) (om-make-point 24 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "n-repet" 0 (om-make-point 632 350) "" "n-repet" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 29 68) (om-make-point 418 30) (list (list 9900 9800) 9300 9200 9100 9000 8800 8500 8400 8200 7700 7100) "((9900 9800) 9300 9200 9100 9000 8800 8500 8400 8200 7700 7100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 623 85) (om-make-point 292 30) (list (list 20 20) 115 100 85 115 100 86 115 40 115 55) "((20 20) 115 100 85 115 100 86 115 40 115 55)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 2 0 nil 0) (5 0 3 0 nil 0) (3 0 4 0 nil 0) (17 0 5 0 nil 0) (1 0 5 1 nil 0) (18 0 5 2 nil 0) (12 0 5 3 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (7 0 6 2 nil 0) (6 0 9 0 nil 0) (10 0 9 1 nil 0) (13 0 11 0 nil 0) (2 0 13 0 nil 0) (15 0 13 1 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0))) 7.04 nil "" (om-make-point 82 23) (om-make-point 1215 681)) (quote ((om-load-inputfun (quote input-funbox) "" "n-repet" nil))) (om-make-point 224 71) (om-make-point 51 67) (list (list (list (list 9100 8200 9200 9000 8500 8400 (list 9900 9800) 9300 8800 7700 7100) (list (list 5/32) (list 5/16) (list 1/8) (list 3/16) (list 1/4) (list 9/32) (list 1/32 1/16) (list 3/32) (list 7/32) (list 11/32) (list 3/8)) (list 85 40 100 115 86 115 (list 20 20) 115 100 115 55) (list nil nil 1 "4 5" nil 5 (list nil nil) 2 4 5 4)) (list (list 9000 8500 8200 8800 7700 9200 9100 9300 7100 8400 (list 9900 9800)) (list (list 3/16) (list 1/4) (list 5/16) (list 7/32) (list 11/32) (list 1/8) (list 5/32) (list 3/32) (list 3/8) (list 9/32) (list 1/32 1/16)) (list 115 86 40 100 115 100 85 115 55 115 (list 20 20)) (list "4 5" nil nil 4 5 1 nil 2 4 5 (list nil nil))) (list (list 9100 8800 7700 8200 9000 9200 8500 7100 9300 (list 9900 9800) 8400) (list (list 5/32) (list 7/32) (list 11/32) (list 5/16) (list 3/16) (list 1/8) (list 1/4) (list 3/8) (list 3/32) (list 1/32 1/16) (list 9/32)) (list 85 100 115 40 115 100 86 55 115 (list 20 20) 115) (list nil 4 5 nil "4 5" 1 nil 4 2 (list nil nil) 5)) (list (list 8200 7100 9100 9300 9000 8400 9200 7700 8500 8800 (list 9900 9800)) (list (list 5/16) (list 3/8) (list 5/32) (list 3/32) (list 3/16) (list 9/32) (list 1/8) (list 11/32) (list 1/4) (list 7/32) (list 1/32 1/16)) (list 40 55 85 115 115 115 100 115 86 100 (list 20 20)) (list nil 4 nil 2 "4 5" 5 1 5 nil 4 (list nil nil))) (list (list 9100 9300 9200 8400 (list 9900 9800) 9000 8800 7700 8500 7100 8200) (list (list 5/32) (list 3/32) (list 1/8) (list 9/32) (list 1/32 1/16) (list 3/16) (list 7/32) (list 11/32) (list 1/4) (list 3/8) (list 5/16)) (list 85 115 100 115 (list 20 20) 115 100 115 86 55 40) (list nil 2 1 5 (list nil nil) "4 5" 4 5 nil 4 nil)) (list (list 8800 (list 9900 9800) 7700 9000 7100 9300 8400 9100 9200 8200 8500) (list (list 7/32) (list 1/32 1/16) (list 11/32) (list 3/16) (list 3/8) (list 3/32) (list 9/32) (list 5/32) (list 1/8) (list 5/16) (list 1/4)) (list 100 (list 20 20) 115 115 55 115 115 85 100 40 86) (list 4 (list nil nil) 5 "4 5" 4 2 5 nil 1 nil nil)) (list (list 9200 9300 8800 9100 9000 8400 (list 9900 9800) 7100 7700 8200 8500) (list (list 1/8) (list 3/32) (list 7/32) (list 5/32) (list 3/16) (list 9/32) (list 1/32 1/16) (list 3/8) (list 11/32) (list 5/16) (list 1/4)) (list 100 115 100 85 115 115 (list 20 20) 55 115 40 86) (list 1 2 4 nil "4 5" 5 (list nil nil) 4 5 nil nil)) (list (list 9100 8500 9300 8200 8400 9200 7100 7700 8800 (list 9900 9800) 9000) (list (list 5/32) (list 1/4) (list 3/32) (list 5/16) (list 9/32) (list 1/8) (list 3/8) (list 11/32) (list 7/32) (list 1/32 1/16) (list 3/16)) (list 85 86 115 40 115 100 55 115 100 (list 20 20) 115) (list nil nil 2 nil 5 1 4 5 4 (list nil nil) "4 5")) (list (list 9200 9000 8200 7700 (list 9900 9800) 8800 8400 9300 7100 8500 9100) (list (list 1/8) (list 3/16) (list 5/16) (list 11/32) (list 1/32 1/16) (list 7/32) (list 9/32) (list 3/32) (list 3/8) (list 1/4) (list 5/32)) (list 100 115 40 115 (list 20 20) 100 115 115 55 86 85) (list 1 "4 5" nil 5 (list nil nil) 4 5 2 4 nil nil)) (list (list (list 9900 9800) 9100 8500 9200 8800 7100 9000 9300 8400 7700 8200) (list (list 1/32 1/16) (list 5/32) (list 1/4) (list 1/8) (list 7/32) (list 3/8) (list 3/16) (list 3/32) (list 9/32) (list 11/32) (list 5/16)) (list (list 20 20) 85 86 100 100 55 115 115 115 115 40) (list (list nil nil) nil nil 1 4 4 "4 5" 2 5 5 nil)) (list (list 7100 8500 (list 9900 9800) 8200 9000 8800 9100 9300 8400 7700 9200) (list (list 3/8) (list 1/4) (list 1/32 1/16) (list 5/16) (list 3/16) (list 7/32) (list 5/32) (list 3/32) (list 9/32) (list 11/32) (list 1/8)) (list 55 86 (list 20 20) 40 115 100 85 115 115 115 100) (list 4 nil (list nil nil) nil "4 5" 4 nil 2 5 5 1)) (list (list 9300 8500 9100 8200 9000 8400 7100 9200 8800 (list 9900 9800) 7700) (list (list 3/32) (list 1/4) (list 5/32) (list 5/16) (list 3/16) (list 9/32) (list 3/8) (list 1/8) (list 7/32) (list 1/32 1/16) (list 11/32)) (list 115 86 85 40 115 115 55 100 100 (list 20 20) 115) (list 2 nil nil nil "4 5" 5 4 1 4 (list nil nil) 5)) (list (list 9100 7700 8200 7100 9200 8800 9000 8400 8500 9300 (list 9900 9800)) (list (list 5/32) (list 11/32) (list 5/16) (list 3/8) (list 1/8) (list 7/32) (list 3/16) (list 9/32) (list 1/4) (list 3/32) (list 1/32 1/16)) (list 85 115 40 55 100 100 115 115 86 115 (list 20 20)) (list nil 5 nil 4 1 4 "4 5" 5 nil 2 (list nil nil))) (list (list 9200 7100 8800 8400 (list 9900 9800) 9000 9100 8500 8200 9300 7700) (list (list 1/8) (list 3/8) (list 7/32) (list 9/32) (list 1/32 1/16) (list 3/16) (list 5/32) (list 1/4) (list 5/16) (list 3/32) (list 11/32)) (list 100 55 100 115 (list 20 20) 115 85 86 40 115 115) (list 1 4 4 5 (list nil nil) "4 5" nil nil nil 2 5)) (list (list 9100 8200 9300 7100 8400 8800 (list 9900 9800) 9200 8500 7700 9000) (list (list 5/32) (list 5/16) (list 3/32) (list 3/8) (list 9/32) (list 7/32) (list 1/32 1/16) (list 1/8) (list 1/4) (list 11/32) (list 3/16)) (list 85 40 115 55 115 100 (list 20 20) 100 86 115 115) (list nil nil 2 4 5 4 (list nil nil) 1 nil 5 "4 5")) (list (list 9100 8400 9300 8800 9200 7700 8200 7100 9000 8500 (list 9900 9800)) (list (list 5/32) (list 9/32) (list 3/32) (list 7/32) (list 1/8) (list 11/32) (list 5/16) (list 3/8) (list 3/16) (list 1/4) (list 1/32 1/16)) (list 85 115 115 100 100 115 40 55 115 86 (list 20 20)) (list nil 5 2 4 1 5 nil 4 "4 5" nil (list nil nil))))) "x" "mode-I"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (8 0 1 0 nil 0) (7 0 1 1 nil 0) (4 0 3 0 nil 0) (16 0 4 0 nil 0) (8 0 5 1 nil 3) (12 2 6 0 nil 1) (11 2 6 1 nil 1) (3 2 6 2 nil 1) (12 1 7 0 nil 2) (11 1 7 1 nil 2) (3 1 7 2 nil 2) (12 0 8 0 nil 3) (11 0 8 1 nil 3) (3 0 8 2 nil 3) (13 0 9 0 nil 0) (10 0 9 1 nil 0) (2 0 9 2 nil 0) (15 0 11 0 nil 0) (17 0 12 0 nil 0) (5 0 14 0 nil 3) (9 0 14 1 nil 0) (7 0 14 2 nil 2) (6 0 14 3 nil 1) (16 0 15 0 nil 0) (16 0 17 0 nil 0))) nil 7.04))
